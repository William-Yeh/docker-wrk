name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: wrk
  REPO_OWNER: william-yeh   # must be lower-case
  REGISTRY_HOST: ghcr.io    # GitHub Container Registry
  LATEST_TAG: $REGISTRY_HOST/$REPO_OWNER/$IMAGE_NAME:latest

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile --tag $IMAGE_NAME
            ./run_tests.sh
          fi

      - name: Save tested Docker image for later use
        run: |
          docker save -o /tmp/myimage.tar $IMAGE_NAME

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: myimage
          path: /tmp/myimage.tar

  # Push image to GitHub Packages.
  # @see https://docs.github.com/en/actions/publishing-packages/publishing-docker-images
  # @see https://github.com/marketplace/actions/build-and-push-docker-images
  # @see https://event-driven.io/en/how_to_buid_and_push_docker_image_with_github_actions/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: myimage
          path: /tmp

      - name: Load previously saved Docker image
        run: |
          docker load --input /tmp/myimage.tar
          docker image ls -a

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_HOST }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          flavor: |
            latest=false
          images: |
            name=${{ env.REGISTRY_HOST }}/${{ env.REPO_OWNER }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}

      - name: Push for versioned tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          docker tag $IMAGE_NAME ${{ steps.meta.outputs.tags }}
          docker push ${{ steps.meta.outputs.tags }}

      - name: Push for latest tag
        run: |
          docker tag $IMAGE_NAME ${{ env.LATEST_TAG }}
          docker push ${{ env.LATEST_TAG }}


#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Build and push for versioned tag
#        uses: docker/build-push-action@v4
#        if: startsWith(github.ref, 'refs/tags/v')
#        with:
#          # relative path to the place where source code with Dockerfile is located
#          context: .
#
#          # Note: tags has to be all lower-case
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}
#
#          # build on feature branches, push only on master branch
#          push: ${{ github.ref == 'refs/heads/master' }}
#
#      - name: Build and push for latest tag
#        uses: docker/build-push-action@v4
#        with:
#          # relative path to the place where source code with Dockerfile is located
#          context: .
#
#          tags: ${{ env.REGISTRY_HOST }}/${{ env.REPO_OWNER }}/${{ env.IMAGE_NAME }}:latest
#          labels: ${{ steps.meta.outputs.labels }}
#
#          # build on feature branches, push only on master branch
#          push: ${{ github.ref == 'refs/heads/master' }}
